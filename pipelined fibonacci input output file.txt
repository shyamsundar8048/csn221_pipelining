mips input : for fibonacci

addi $2,$0,10
addi $3,$0,0
addi $4,$0,1
addi $5,$0,2
loop:
beq $2,$5,pp
add $6,$3,$4
add $3,$4,$0
add $4,$6,$0
addi $5,$5,1
j loop
pp:
*end:


parsing output:

00100000010000000000000000001010
00100000011000000000000000000000
00100000100000000000000000000001
00100000101000000000000000000010
00000000000000000000000000000000
00111100010001010000000000001101
00000000011001000011000000100000
00000000100000000001100000100000
00000000110000000010000000100000
00100000101001010000000000000001
11111100000000000000000000000110
00000000000000000000000000000000
11111111111111111111111111111111


pipelined execution output :

total number of clock cycles : 138
register 0 : 00000000000000000000000000000000
register 1 : 00000000000000000000000000000000
register 2 : 00000000000000000000000000001010
register 3 : 00000000000000000000000000010101
register 4 : 00000000000000000000000000100010
register 5 : 00000000000000000000000000001010
register 6 : 00000000000000000000000000100010
register 7 : 00000000000000000000000000000000
register 8 : 00000000000000000000000000000000
register 9 : 00000000000000000000000000000000
register 10 : 00000000000000000000000000000000
register 11 : 00000000000000000000000000000000
register 12 : 00000000000000000000000000000000
register 13 : 00000000000000000000000000000000
register 14 : 00000000000000000000000000000000
register 15 : 00000000000000000000000000000000
register 16 : 00000000000000000000000000000000
register 17 : 00000000000000000000000000000000
register 18 : 00000000000000000000000000000000
register 19 : 00000000000000000000000000000000
register 20 : 00000000000000000000000000000000
register 21 : 00000000000000000000000000000000
register 22 : 00000000000000000000000000000000
register 23 : 00000000000000000000000000000000
register 24 : 00000000000000000000000000000000
register 25 : 00000000000000000000000000000000
register 26 : 00000000000000000000000000000000
register 27 : 00000000000000000000000000000000
register 28 : 00000000000000000000000000000000
register 29 : 00000000000000000000000000000000
register 30 : 00000000000000000000000000000000
register 31 : 00000000000000000000000000000000






